#include "get_next_line.h"
#include "libft.h"
#include <fcntl.h>
#include <stdio.h>

int main(int argc, char **argv)
{
	char	*line;
	int		fd;
	int		ret;
	int		i;
	int		num_lines;

	// printf("ret: %d\n", get_next_line(-99, NULL));
	// printf("ret: %d\n", get_next_line(-1, NULL));
	// printf("ret: %d\n", get_next_line(-10000, NULL));

	// printf("ret: %d\n", get_next_line(1, NULL)); // fildes 1 is stdout
	// printf("ret: %d\n", get_next_line(2, NULL)); // fildes 2 is stderr
	// printf("ret: %d\n", get_next_line(99, NULL));

	// printf("ret: %d\n", get_next_line(-99, &line));
	// printf("ret: %d\n", get_next_line(-1, &line));
	// printf("ret: %d\n", get_next_line(-10000, &line));
	// return (0);

	num_lines = 4; // Control # of calls
	if (argc > 2)
		ft_putendl("Too many arguments.");
	else if (argc == 2)
	{
		fd = open(argv[1], O_RDONLY);
		// printf("FD: |%d|\n", fd);
		i = 1;
		while (i++ <= num_lines)
		{
			ret = get_next_line(fd, &line);
			if (ret == -1)
				ft_putendl("* Error while reading!");
			else if (ret == 0)
				ft_putendl("* End of file.");
			else
				ft_putstr(line);
			ft_strdel(&line);
		}
		close(fd);
	}
	else if (argc == 1)
	{
		fd = 0;		// read from stdin file descriptor
		i = 1;
		while (i++ <= num_lines)
		{
			ret = get_next_line(fd, &line);
			// printf("FD: |%d|\n", fd);
			if (ret == -1)
				ft_putendl("* Error while reading!");
			else if (ret == 0)
				ft_putendl("* End of file.");
			else
				ft_putstr(line);
			ft_strdel(&line);
		}
	}
	return (0);
}

/*
** 1. Create a symlink in the root of the project with:
**		ln -s eval_tests/main.c.test main.c
** (Make sure you .gitignore the main.c symlink!)
**
** 2. Make sure your static library exists (if you use it):
**		make re -C libft
**
** 3. Compile with:
**		gcw -I libft/includes -o get_next_line.o -c get_next_line.c
**		gcw -I libft/includes -o main.o -c main.c
**		gcw -o test_gnl main.o get_next_line.o -I libft/includes -L libft/ -lft
**
**	Or just... use the Makefile, Luke!
*/
